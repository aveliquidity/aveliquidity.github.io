import{u as d,d as w,a as f,c as u,w as h,o as _,r as p,b as r,e as c,f as A,g as M,h as C,K as g,i as k}from"./index-CJdFXsl4.js";function m(a){let o=d();o.accounts=a;let e=o.walletAddress;a.length===0?o.disconnect():a[0]!==e&&(o.setWalletAddress(a[0]),window.location.reload())}function y(){let{ethereum:a}=window,o=d();a&&(a.on("chainChanged",e=>{o.setChainId(e),window.location.reload()}),a.on("accountsChanged",m),a.on("disconnect",()=>{o.disconnect()}))}function v(){return new Promise((a,o)=>{var l;let{ethereum:e}=window,n=d();(l=e==null?void 0:e.request)==null||l.call(e,{method:"eth_requestAccounts"}).then(t=>{var s;if(e!=null&&e.chainId?n.setChainId(e==null?void 0:e.chainId):(s=e==null?void 0:e.request)==null||s.call(e,{method:"eth_chainId"}).then(i=>{(typeof i=="string"||typeof i=="number")&&n.setChainId(i)}),Array.isArray(t)){n.accounts=t,n.setProvider(e),n.setWallet("MetaMask");let i=n.walletAddress;if(t.length===0){o("please connect MetaMask");return}else t[0]!==i&&(n.setWalletAddress(t[0]),y());a(!0)}}).catch(t=>{t.code===4001?o("请连接MetaMask"):console.error(t)})})}const S=w({async beforeRouteEnter(a,o,e){var n,l,t,s;(n=window==null?void 0:window.trustwallet)!=null&&n.solana&&!((s=(t=(l=window.ethereum)==null?void 0:l.address)==null?void 0:t.startsWith)!=null&&s.call(t,"0x"))&&window.ethereum.address?(await M().catch(async()=>!1),e()):(window!=null&&window.ethereum&&await v().catch(async()=>!1),e())}}),b=w({...S,__name:"index",setup(a){const o=f();d();let e=u(()=>C().aToken);return h(e,n=>{n&&(console.log(n),o.go(0))}),_(()=>{}),(n,l)=>{const t=p("router-view");return r(),c(t,null,{default:A(({Component:s})=>[(r(),c(g,null,[(r(),c(k(s)))],1024))]),_:1})}}});export{b as default};
